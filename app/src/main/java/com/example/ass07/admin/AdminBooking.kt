package com.example.ass07.admin
import android.util.Log
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response


@Composable
fun Booking(navController: NavController) {
    var searchQuery by remember { mutableStateOf("") }
    var selectedStatus by remember { mutableStateOf("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") }
    var bookingList by remember { mutableStateOf<List<Booking>>(emptyList()) }

    val context = LocalContext.current
    val bookingService = BookingAPI.create()

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏≤‡∏Å API
    LaunchedEffect(Unit) {
        fetchBookings(bookingService) { bookings ->
            Log.d("Booking", "Fetched bookings: $bookings")
            bookingList = bookings
        }
    }


    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    val filteredBookings = bookingList.filter {
        (selectedStatus == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" || it.status?.toString() == selectedStatus) &&
                (it.petName?.contains(searchQuery, ignoreCase = true) == true ||
                        it.name?.contains(searchQuery, ignoreCase = true) == true ||
                        it.roomType?.contains(searchQuery, ignoreCase = true) == true ||
                        it.bookingId?.toString()?.contains(searchQuery) == true)
    }

    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        Text(text = "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á", fontSize = 20.sp, fontWeight = FontWeight.Bold)
        Spacer(modifier = Modifier.height(8.dp))

        // ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        OutlinedTextField(
            value = searchQuery,
            onValueChange = { searchQuery = it },
            modifier = Modifier.fillMaxWidth(),
            placeholder = { Text(" ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á... \n(‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á / ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á / ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á)") },
            leadingIcon = { Icon(Icons.Default.Search, contentDescription = "Search") }
        )

        Spacer(modifier = Modifier.height(8.dp))

        // Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
        StatusDropdown(selectedStatus) { newStatus ->
            selectedStatus = newStatus
        }

        Spacer(modifier = Modifier.height(8.dp))

        LazyColumn {
            items(filteredBookings) { booking ->
                BookingItem(booking, navController,bookingService)
            }
        }
    }
}

// Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
@Composable
fun StatusDropdown(selectedStatus: String, onStatusSelected: (String) -> Unit) {
    val statusOptions = listOf("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î","0", "1" , "2" , "3") // 0 = ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô 1 = ‡πÄ‡∏ä‡πá‡∏ô‡∏≠‡∏¥‡∏ô 2 = ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå 3 = ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
    var expanded by remember { mutableStateOf(false) }

    Box(modifier = Modifier.fillMaxWidth()) {
        OutlinedButton(
            onClick = { expanded = true },
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: $selectedStatus")
        }
        DropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {
            statusOptions.forEach { status ->
                DropdownMenuItem(
                    text = { Text(status) },
                    onClick = {
                        onStatusSelected(status)
                        expanded = false
                    }
                )
            }
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
fun fetchBookings(bookingService: BookingAPI, onResult: (List<Booking>) -> Unit) {
    bookingService.getBookings().enqueue(object : Callback<List<Booking>> {
        override fun onResponse(call: Call<List<Booking>>, response: Response<List<Booking>>) {
            if (response.isSuccessful) {
                val bookings = response.body() ?: emptyList()
                Log.d("Booking", "API Response: $bookings")
                onResult(bookings)
            } else {
                Log.e("Booking", "Error: ${response.errorBody()?.string()}")
            }
        }

        override fun onFailure(call: Call<List<Booking>>, t: Throwable) {
            Log.e("Booking", "API Call Failed: ${t.message}")
        }
    })
}


// ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
@Composable
fun BookingItem(booking: Booking, navController: NavController,bookingService: BookingAPI) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp)
            .clickable {
                navController.navigate("booking_detail/${booking.bookingId}")
            },
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(text = "üìå ID: ${booking.bookingId ?: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"}")
            Text(text = "üê∂ ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: ${booking.petName ?: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"} (${booking.petBreed ?: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}, ${booking.petAge ?: "?"} ‡∏õ‡∏µ)")
            Text(text = "üë§ ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á: ${booking.name ?: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"} (${booking.tellNumber ?: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå"})")
            Text(text = "üè† ‡∏´‡πâ‡∏≠‡∏á: ${booking.roomType ?: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"} (‡∏£‡∏≤‡∏Ñ‡∏≤ ${booking.pricePerDay ?: "?"} ‡∏ö‡∏≤‡∏ó/‡∏ß‡∏±‡∏ô)")
            Text(text = "üìÖ Check-in: ${booking.checkIn ?: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}")
            Text(text = "üìÖ Check-out: ${booking.checkOut ?: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}")
            Text(
                text = "üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${
                    when (booking.status) {
                        0 -> "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô"
                        1 -> "‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
                        2 -> "‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡πÅ‡∏•‡πâ‡∏ß"
                        3 -> "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
                        else -> "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                    }
                }"
            )
            Row(horizontalArrangement = Arrangement.End) {
                if (booking.status == 0) {
                    OutlinedButton(
                        onClick = { onConfirmBooking(booking.bookingId,bookingService) },
                        modifier = Modifier.padding(top = 8.dp)
                    ) {
                        Text(text = "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
                    }
                    OutlinedButton(
                        onClick = { onCancelBooking(booking.bookingId, bookingService) },
                        modifier = Modifier.padding(top = 8.dp)
                    ) {
                        Text(text = "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
                    }
                }
            }
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡∏ñ‡∏π‡∏Å‡∏Å‡∏î
fun onConfirmBooking(bookingId: Int, bookingService: BookingAPI) {
    Log.d("Booking", "Confirming booking with ID: $bookingId")

    val status = 1 // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç, ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà string
    bookingService.updateBooking(bookingId, status).enqueue(object : Callback<Map<String, String>> {
        override fun onResponse(call: Call<Map<String, String>>, response: Response<Map<String, String>>) {
            if (response.isSuccessful) {
                val message = response.body()?.get("message")
                Log.d("Request", "Status: ${status}")
                Log.d("Booking", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $message")
            } else {
                Log.d("Request", "Status: ${status}")
                Log.e("Booking", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.message()}")
            }
        }

        override fun onFailure(call: Call<Map<String, String>>, t: Throwable) {
            Log.e("Booking", "API call failed: ${t.message}")
        }
    })
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡∏ñ‡∏π‡∏Å‡∏Å‡∏î
fun onCancelBooking(bookingId: Int, bookingService: BookingAPI) {
    Log.d("Booking", "Canceling booking with ID: $bookingId")

    // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ PUT ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 3 (‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å)
    bookingService.updateBooking(bookingId, 3).enqueue(object : Callback<Map<String, String>> {
        override fun onResponse(call: Call<Map<String, String>>, response: Response<Map<String, String>>) {
            if (response.isSuccessful) {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å response
                val message = response.body()?.get("message")
                Log.d("Booking", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $message")
            } else {
                Log.e("Booking", "‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.message()}")
            }
        }

        override fun onFailure(call: Call<Map<String, String>>, t: Throwable) {
            Log.e("Booking", "API call failed: ${t.message}")
        }
    })
}




